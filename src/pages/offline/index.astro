---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Card from '@/components/ui/Card.astro'
import CardContent from '@/components/ui/CardContent.astro'
import Badge from '@/components/ui/Badge.astro'
---

<BaseLayout 
  title="Offline Reading" 
  description="Browse cached content available for offline reading"
  type="website"
  robots="noindex, follow"
>
  <div class="container mx-auto px-4 py-8">
    <!-- Network Status Indicator -->
    <div id="network-status" class="mb-8">
      <div id="offline-indicator" class="hidden">
        <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 dark:bg-orange-900/20 dark:border-orange-800">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-orange-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-orange-800 dark:text-orange-200">You're currently offline</h3>
              <div class="mt-2 text-sm text-orange-700 dark:text-orange-300">
                <p>You can still browse cached content below. Content will sync when you're back online.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div id="online-indicator" class="hidden">
        <div class="bg-green-50 border border-green-200 rounded-lg p-4 dark:bg-green-900/20 dark:border-green-800">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-green-800 dark:text-green-200">You're online</h3>
              <div class="mt-2 text-sm text-green-700 dark:text-green-300">
                <p>All content is available. Cached content for offline reading is listed below.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-6xl font-bold tracking-tight mb-6">
        Offline Reading
      </h1>
      <p class="text-lg text-muted-foreground max-w-2xl mx-auto">
        Access your cached content for offline reading. These posts and pages are available even when you're disconnected.
      </p>
    </div>

    <!-- Cache Status -->
    <Card class="mb-8">
      <CardContent class="p-6">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold">Cache Status</h2>
          <button 
            id="refresh-cache-btn"
            class="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors"
          >
            Refresh Cache
          </button>
        </div>
        <div id="cache-status" class="space-y-2">
          <div class="flex justify-between text-sm">
            <span class="text-muted-foreground">Cache Version:</span>
            <span id="cache-version">Loading...</span>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-muted-foreground">Cached Items:</span>
            <span id="cache-count">Loading...</span>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-muted-foreground">Last Updated:</span>
            <span id="cache-updated">Loading...</span>
          </div>
        </div>
      </CardContent>
    </Card>

    <!-- Offline Content List -->
    <div class="space-y-8">
      <!-- Cached Blog Posts -->
      <section>
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold">Cached Blog Posts</h2>
          <Badge variant="secondary" id="posts-count">0 posts</Badge>
        </div>
        
        <div id="cached-posts" class="space-y-4">
          <div class="text-center py-8 text-muted-foreground">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p>Loading cached content...</p>
          </div>
        </div>
      </section>

      <!-- Cached Pages -->
      <section>
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold">Cached Pages</h2>
          <Badge variant="secondary" id="pages-count">Loading...</Badge>
        </div>
        
        <div id="cached-pages" class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <!-- Cached pages will be loaded here -->
        </div>
      </section>

      <!-- Cache Management -->
      <section>
        <h2 class="text-2xl font-bold mb-6">Cache Management</h2>
        
        <Card>
          <CardContent class="p-6">
            <div class="space-y-4">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="font-medium">Clear Cache</h3>
                  <p class="text-sm text-muted-foreground">Remove all cached content to free up space</p>
                </div>
                <button 
                  id="clear-cache-btn"
                  class="px-4 py-2 bg-destructive text-destructive-foreground rounded-md hover:bg-destructive/90 transition-colors"
                >
                  Clear All
                </button>
              </div>
              
              <div class="flex items-center justify-between pt-4 border-t">
                <div>
                  <h3 class="font-medium">Update Check</h3>
                  <p class="text-sm text-muted-foreground">Check for updates to the offline functionality</p>
                </div>
                <button 
                  id="update-check-btn"
                  class="px-4 py-2 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/80 transition-colors"
                >
                  Check Updates
                </button>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>
    </div>

    <!-- No Content Message -->
    <div id="no-content" class="hidden text-center py-12">
      <div class="text-6xl mb-6">ðŸ“±</div>
      <h3 class="text-xl font-semibold mb-4">No Cached Content Yet</h3>
      <p class="text-muted-foreground mb-8 max-w-md mx-auto">
        Visit blog posts and pages while online to cache them for offline reading. 
        They'll appear here for easy access when you're disconnected.
      </p>
      <div class="space-x-4">
        <a 
          href="/journal/" 
          class="inline-block px-6 py-3 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors"
        >
          Browse Journal
        </a>
        <a 
          href="/writing/" 
          class="inline-block px-6 py-3 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/80 transition-colors"
        >
          View Writing
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Type declarations
  declare global {
    interface Window {
      offlinePage: OfflinePage;
      serviceWorkerManager: any;
    }
  }

  // Offline page functionality
  class OfflinePage {
    constructor() {
      this.init();
    }

    async init() {
      this.updateNetworkStatus();
      await this.loadCacheStatus();
      await this.loadCachedContent();
      this.setupEventListeners();
      
      // Listen for network changes
      window.addEventListener('online', () => this.updateNetworkStatus());
      window.addEventListener('offline', () => this.updateNetworkStatus());
      
      // Listen for service worker messages
      window.addEventListener('message', (event) => {
        if (event.data?.source === 'service-worker-manager') {
          this.handleServiceWorkerMessage(event.data);
        }
      });
    }

    updateNetworkStatus() {
      const onlineIndicator = document.getElementById('online-indicator');
      const offlineIndicator = document.getElementById('offline-indicator');
      
      if (navigator.onLine) {
        onlineIndicator?.classList.remove('hidden');
        offlineIndicator?.classList.add('hidden');
      } else {
        onlineIndicator?.classList.add('hidden');
        offlineIndicator?.classList.remove('hidden');
      }
    }

    async loadCacheStatus() {
      try {
        const serviceWorkerManager = window.serviceWorkerManager;
        if (!serviceWorkerManager) {
          this.showCacheError();
          return;
        }

        const status = await serviceWorkerManager.getCacheStatus();
        if (status) {
          this.displayCacheStatus(status);
        } else {
          this.showCacheError();
        }
      } catch (error) {
        console.error('Failed to load cache status:', error);
        this.showCacheError();
      }
    }

    displayCacheStatus(status: any) {
      const versionEl = document.getElementById('cache-version');
      const countEl = document.getElementById('cache-count');
      const updatedEl = document.getElementById('cache-updated');

      if (versionEl) versionEl.textContent = status.version || 'Unknown';
      
      const totalCount = Object.values(status.caches || {})
        .reduce((sum: number, cache: any) => sum + (cache.count || 0), 0);
      if (countEl) countEl.textContent = totalCount.toString();
      
      if (updatedEl) {
        updatedEl.textContent = status.lastUpdate 
          ? new Date(status.lastUpdate).toLocaleString()
          : 'Never';
      }
    }

    showCacheError() {
      const versionEl = document.getElementById('cache-version');
      const countEl = document.getElementById('cache-count');
      const updatedEl = document.getElementById('cache-updated');

      if (versionEl) versionEl.textContent = 'Error';
      if (countEl) countEl.textContent = 'Error';
      if (updatedEl) updatedEl.textContent = 'Error';
    }

    async loadCachedContent() {
      try {
        const serviceWorkerManager = window.serviceWorkerManager;
        if (!serviceWorkerManager) {
          this.showNoContent();
          return;
        }

        const offlinePosts = await serviceWorkerManager.getOfflinePosts();
        this.displayCachedPosts(offlinePosts);
        this.displayCachedPages();
        
        if (offlinePosts.length === 0) {
          this.showNoContent();
        }
      } catch (error) {
        console.error('Failed to load cached content:', error);
        this.showNoContent();
      }
    }

    displayCachedPosts(posts: any[]) {
      const container = document.getElementById('cached-posts');
      const countBadge = document.getElementById('posts-count');
      
      if (!container) return;
      
      if (posts.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8 text-muted-foreground">
            <p>No blog posts cached yet. Visit posts while online to cache them for offline reading.</p>
          </div>
        `;
        if (countBadge) countBadge.textContent = '0 posts';
        return;
      }

      const html = posts.map((post: any) => {
        const url = new URL(post.url);
        const title = this.getTitleFromUrl(url.pathname);
        
        return `
          <div class="border rounded-lg p-4 hover:bg-accent/50 transition-colors">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <h3 class="font-medium">
                  <a href="${post.url}" class="hover:text-primary transition-colors">
                    ${title}
                  </a>
                </h3>
                <p class="text-sm text-muted-foreground mt-1">${url.pathname}</p>
                <div class="flex items-center mt-2">
                  <span class="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:bg-green-900/30 dark:text-green-400">
                    Cached
                  </span>
                </div>
              </div>
              <button 
                onclick="offlinePage.visitPost('${post.url}')"
                class="ml-4 px-3 py-1 text-sm bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-colors"
              >
                Read
              </button>
            </div>
          </div>
        `;
      }).join('');

      container.innerHTML = html;
      if (countBadge) countBadge.textContent = `${posts.length} posts`;
    }

    displayCachedPages() {
      const container = document.getElementById('cached-pages');
      const countBadge = document.getElementById('pages-count');
      
      if (!container) return;

      const staticPages = [
        { url: '/', title: 'Home', description: 'Main homepage' },
        { url: '/journal/', title: 'Journal', description: 'Blog posts and articles' },
        { url: '/writing/', title: 'Writing', description: 'All writing collection' },
        { url: '/projects/', title: 'Projects', description: 'Technical projects' },
        { url: '/links/', title: 'Links', description: 'Curated links' },
        { url: '/lists/', title: 'Lists', description: 'Various lists' },
        { url: '/subscribe/', title: 'Subscribe', description: 'Newsletter signup' }
      ];

      const html = staticPages.map(page => `
        <div class="border rounded-lg p-4 hover:bg-accent/50 transition-colors">
          <h3 class="font-medium mb-1">
            <a href="${page.url}" class="hover:text-primary transition-colors">
              ${page.title}
            </a>
          </h3>
          <p class="text-sm text-muted-foreground mb-2">${page.description}</p>
          <span class="inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">
            Static Page
          </span>
        </div>
      `).join('');

      container.innerHTML = html;
      if (countBadge) countBadge.textContent = `${staticPages.length} pages`;
    }

    showNoContent() {
      const noContentEl = document.getElementById('no-content');
      const cachedPostsEl = document.getElementById('cached-posts');
      
      if (noContentEl) noContentEl.classList.remove('hidden');
      if (cachedPostsEl) cachedPostsEl.style.display = 'none';
    }

    getTitleFromUrl(pathname: string) {
      // Extract title from URL path
      const segments = pathname.split('/').filter(Boolean);
      const lastSegment = segments[segments.length - 1] || 'Home';
      
      return lastSegment
        .split('-')
        .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ')
        .replace(/\d{4}-\d{2}-\d{2}-/, ''); // Remove date prefixes
    }

    setupEventListeners() {
      // Refresh cache button
      const refreshBtn = document.getElementById('refresh-cache-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => this.refreshCache());
      }

      // Clear cache button
      const clearBtn = document.getElementById('clear-cache-btn');
      if (clearBtn) {
        clearBtn.addEventListener('click', () => this.clearCache());
      }

      // Update check button
      const updateBtn = document.getElementById('update-check-btn');
      if (updateBtn) {
        updateBtn.addEventListener('click', () => this.checkUpdates());
      }
    }

    async refreshCache() {
      const btn = document.getElementById('refresh-cache-btn');
      const originalText = btn?.textContent;
      
      if (btn) {
        btn.textContent = 'Refreshing...';
        (btn as HTMLButtonElement).disabled = true;
      }

      try {
        await this.loadCacheStatus();
        await this.loadCachedContent();
      } finally {
        if (btn) {
          btn.textContent = originalText || '';
          (btn as HTMLButtonElement).disabled = false;
        }
      }
    }

    async clearCache() {
      if (!confirm('Are you sure you want to clear all cached content? This cannot be undone.')) {
        return;
      }

      const btn = document.getElementById('clear-cache-btn');
      const originalText = btn?.textContent;
      
      if (btn) {
        btn.textContent = 'Clearing...';
        (btn as HTMLButtonElement).disabled = true;
      }

      try {
        const serviceWorkerManager = window.serviceWorkerManager;
        if (serviceWorkerManager) {
          await serviceWorkerManager.clearCache();
          await this.loadCacheStatus();
          await this.loadCachedContent();
          alert('Cache cleared successfully!');
        }
      } catch (error) {
        console.error('Failed to clear cache:', error);
        alert('Failed to clear cache. Please try again.');
      } finally {
        if (btn) {
          btn.textContent = originalText || '';
          (btn as HTMLButtonElement).disabled = false;
        }
      }
    }

    async checkUpdates() {
      const btn = document.getElementById('update-check-btn');
      const originalText = btn?.textContent;
      
      if (btn) {
        btn.textContent = 'Checking...';
        (btn as HTMLButtonElement).disabled = true;
      }

      try {
        const serviceWorkerManager = window.serviceWorkerManager;
        if (serviceWorkerManager) {
          const hasUpdate = await serviceWorkerManager.checkForUpdates();
          alert(hasUpdate ? 'Updates are available!' : 'No updates available.');
        }
      } catch (error) {
        console.error('Failed to check updates:', error);
        alert('Failed to check for updates. Please try again.');
      } finally {
        if (btn) {
          btn.textContent = originalText || '';
          (btn as HTMLButtonElement).disabled = false;
        }
      }
    }

    visitPost(url: string) {
      window.location.href = url;
    }

    handleServiceWorkerMessage(message: any) {
      switch (message.type) {
        case 'post-cached':
          // Refresh the cached posts list
          this.loadCachedContent();
          break;
          
        case 'network-status-changed':
          this.updateNetworkStatus();
          break;
      }
    }
  }

  // Initialize offline page
  let offlinePage;
  
  document.addEventListener('DOMContentLoaded', () => {
    offlinePage = new OfflinePage();
  });

  // Make offlinePage available globally for button clicks
  window.offlinePage = offlinePage!;
</script>