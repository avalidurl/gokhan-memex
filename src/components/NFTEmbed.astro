---
interface Props {
  url?: string
  title?: string
  creator?: string
  description?: string
  image?: string
  contractAddress?: string
  tokenId?: string
}

const { url, title, creator, description, image, contractAddress, tokenId } = Astro.props

// Fetch NFT metadata
async function fetchNFTMetadata(contractAddress: string, tokenId: string) {
  try {
    // Try OpenSea API first
    const openSeaResponse = await fetch(`https://api.opensea.io/api/v2/chain/ethereum/contract/${contractAddress}/nfts/${tokenId}`, {
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (openSeaResponse.ok) {
      const data = await openSeaResponse.json();
      // Try multiple image sources in priority order
      const imageUrl = data.nft?.image_url || 
                      data.nft?.animation_url || 
                      data.nft?.image_original_url ||
                      data.nft?.image_preview_url ||
                      data.nft?.asset_contract?.image_url || '';
      
      return {
        name: data.nft?.name || 'Untitled',
        description: data.nft?.description || '',
        image_url: imageUrl,
        creator: data.nft?.creator?.user?.username || data.nft?.creator || ''
      };
    }
  } catch (error) {
    console.log('OpenSea API failed, trying alternative...');
  }

  try {
    // Fallback to Alchemy API (if available)
    const alchemyResponse = await fetch(`https://eth-mainnet.g.alchemy.com/v2/demo/getNFTMetadata?contractAddress=${contractAddress}&tokenId=${tokenId}`);
    
    if (alchemyResponse.ok) {
      const data = await alchemyResponse.json();
      return {
        name: data.title || data.metadata?.name || 'Untitled',
        description: data.description || data.metadata?.description || '',
        image_url: data.metadata?.image || data.media?.[0]?.gateway || '',
        creator: ''
      };
    }
  } catch (error) {
    console.log('Alchemy API failed');
  }

  return {
    name: 'Untitled',
    description: '',
    image_url: '',
    creator: ''
  };
}

// Fetch metadata if we have contractAddress and tokenId but no title/image
let nftMetadata = null;
if (contractAddress && tokenId && (!title || !image)) {
  nftMetadata = await fetchNFTMetadata(contractAddress, tokenId);
}

// Extract platform and basic info from URL
function parseNFTUrl(url: string) {
  try {
    if (url.includes('zora.co')) {
      return { platform: 'Zora', displayUrl: url, action: 'Collect on Zora' }
    } else if (url.includes('foundation.app')) {
      return { platform: 'Foundation', displayUrl: url, action: 'Collect on Foundation' }
    } else if (url.includes('opensea.io')) {
      return { platform: 'OpenSea', displayUrl: url, action: 'View on OpenSea' }
    } else if (url.startsWith('nft://')) {
      return { platform: 'NFT Protocol', displayUrl: url, action: 'Collect' }
    } else if (url.startsWith('ethereum://')) {
      return { platform: 'Ethereum', displayUrl: url, action: 'View on Etherscan' }
    } else {
      return { platform: 'NFT', displayUrl: url, action: 'View NFT' }
    }
  } catch {
    return { platform: 'NFT', displayUrl: url, action: 'View NFT' }
  }
}

const nftInfo = url ? parseNFTUrl(url) : { platform: 'NFT', displayUrl: '', action: 'View NFT' }
const displayTitle = title || nftMetadata?.name || 'Untitled'
const displayDescription = description || nftMetadata?.description || ''
const displayImage = image || nftMetadata?.image_url || ''
const displayCreator = creator || nftMetadata?.creator || ''

// Generate URLs from contract address and token ID
const etherscanUrl = contractAddress && tokenId 
  ? `https://etherscan.io/nft/${contractAddress}/${tokenId}`
  : url ? url.replace('zora.co', 'etherscan.io') : ''

const openSeaUrl = contractAddress && tokenId
  ? `https://opensea.io/assets/ethereum/${contractAddress}/${tokenId}`
  : null

const zoraUrl = contractAddress && tokenId
  ? `https://zora.co/collect/eth:${contractAddress}/${tokenId}`
  : null

// Use the most appropriate primary action URL
const primaryUrl = url || zoraUrl || openSeaUrl || etherscanUrl
---

<div class="my-6 not-prose">
  <div class="bg-white rounded-lg border border-gray-200 p-4 mx-auto max-w-full overflow-hidden">
    <div class="flex flex-col gap-4">
      <!-- NFT Image -->
      {displayImage && (
        <img 
          src={displayImage} 
          alt={displayTitle}
          class="w-full max-w-full rounded-lg"
          style="height: auto;"
          loading="lazy"
        />
      )}
      
      <!-- NFT Info -->
      <div class="space-y-2">
        <h4 class="text-lg font-semibold text-gray-900">{displayTitle}</h4>
        
        {displayCreator && (
          <p class="text-sm text-gray-500">By {displayCreator}</p>
        )}
        
        {displayDescription && (
          <p class="text-sm text-gray-600 leading-relaxed">{displayDescription}</p>
        )}
      </div>
      
      <!-- Action Buttons -->
      <div class="flex flex-col gap-2">
        <a
          href={primaryUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="w-full inline-flex items-center justify-center px-4 py-2.5 bg-black text-white rounded-md hover:bg-gray-800 transition-colors text-sm font-medium"
        >
          {nftInfo.action}
        </a>
        <div class="flex gap-2">
          {zoraUrl && (
            <a
              href={zoraUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 bg-white text-gray-700 rounded-md hover:bg-gray-50 transition-colors text-xs"
            >
              Zora
            </a>
          )}
          {openSeaUrl && (
            <a
              href={openSeaUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 bg-white text-gray-700 rounded-md hover:bg-gray-50 transition-colors text-xs"
            >
              OpenSea
            </a>
          )}
          <a
            href={etherscanUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 bg-white text-gray-700 rounded-md hover:bg-gray-50 transition-colors text-xs"
          >
            Etherscan
          </a>
        </div>
      </div>
    </div>
  </div>
</div>