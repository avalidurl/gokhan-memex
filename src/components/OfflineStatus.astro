---
// Offline Status Component
// Shows network status and offline reading capabilities
---

<div id="offline-status" class="fixed bottom-4 right-4 z-50 max-w-sm hidden">
  <!-- Offline Notification -->
  <div id="offline-notification" class="bg-orange-500 text-white rounded-lg shadow-lg p-4 mb-2 hidden">
    <div class="flex items-center">
      <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <div>
        <p class="font-medium text-sm">You're offline</p>
        <p class="text-xs opacity-90">Cached content still available</p>
      </div>
      <button onclick="this.parentElement.parentElement.classList.add('hidden')" class="ml-2 opacity-70 hover:opacity-100">
        <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Online Notification -->
  <div id="online-notification" class="bg-green-500 text-white rounded-lg shadow-lg p-4 mb-2 hidden">
    <div class="flex items-center">
      <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <div>
        <p class="font-medium text-sm">Back online</p>
        <p class="text-xs opacity-90">All content synced</p>
      </div>
      <button onclick="this.parentElement.parentElement.classList.add('hidden')" class="ml-2 opacity-70 hover:opacity-100">
        <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Cache Update Notification -->
  <div id="cache-notification" class="bg-blue-500 text-white rounded-lg shadow-lg p-4 mb-2 hidden">
    <div class="flex items-center">
      <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path>
      </svg>
      <div class="flex-1">
        <p class="font-medium text-sm">Content cached</p>
        <p class="text-xs opacity-90">Available for offline reading</p>
      </div>
      <button onclick="this.parentElement.parentElement.classList.add('hidden')" class="ml-2 opacity-70 hover:opacity-100">
        <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Service Worker Update Notification -->
  <div id="sw-update-notification" class="bg-purple-500 text-white rounded-lg shadow-lg p-4 mb-2 hidden">
    <div class="flex items-center">
      <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
      </svg>
      <div class="flex-1">
        <p class="font-medium text-sm">Update available</p>
        <p class="text-xs opacity-90">Refresh to get the latest version</p>
      </div>
      <div class="ml-2 flex space-x-1">
        <button 
          onclick="offlineStatus.applyUpdate()" 
          class="px-2 py-1 bg-white/20 rounded text-xs hover:bg-white/30 transition-colors"
        >
          Update
        </button>
        <button 
          onclick="this.closest('.bg-purple-500').classList.add('hidden')" 
          class="opacity-70 hover:opacity-100"
        >
          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Offline Reading Button (when offline) -->
  <div id="offline-reading-btn" class="hidden">
    <a 
      href="/offline/" 
      class="flex items-center bg-gray-800 text-white rounded-lg shadow-lg p-3 hover:bg-gray-700 transition-colors"
    >
      <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253z"></path>
      </svg>
      <div>
        <p class="font-medium text-sm">Offline Reading</p>
        <p class="text-xs opacity-80">Browse cached content</p>
      </div>
    </a>
  </div>
</div>

<script>
  // Offline Status Manager
  class OfflineStatusManager {
    constructor() {
      this.statusElement = null;
      this.isVisible = false;
      this.hideTimeout = null;
      this.init();
    }

    init() {
      this.statusElement = document.getElementById('offline-status');
      if (!this.statusElement) return;

      this.setupEventListeners();
      this.updateStatus();
    }

    setupEventListeners() {
      // Network status changes
      window.addEventListener('online', () => this.handleOnline());
      window.addEventListener('offline', () => this.handleOffline());

      // Service worker messages
      window.addEventListener('message', (event) => {
        if (event.data?.source === 'service-worker-manager') {
          this.handleServiceWorkerMessage(event.data);
        }
      });

      // Initial network status
      if (!navigator.onLine) {
        this.handleOffline();
      }
    }

    handleOnline() {
      this.showNotification('online-notification', 3000);
      this.hideElement('offline-reading-btn');
    }

    handleOffline() {
      this.showNotification('offline-notification', 5000);
      this.showElement('offline-reading-btn');
    }

    handleServiceWorkerMessage(message) {
      switch (message.type) {
        case 'post-cached':
          this.showNotification('cache-notification', 3000);
          break;

        case 'sw-update-available':
          this.showNotification('sw-update-notification', 0); // Don't auto-hide
          break;

        case 'sw-installed':
          this.showCacheNotification();
          break;
      }
    }

    showNotification(elementId, duration = 0) {
      const notification = document.getElementById(elementId);
      if (!notification) return;

      // Show the main status container
      this.statusElement?.classList.remove('hidden');
      this.isVisible = true;

      // Show the specific notification
      notification.classList.remove('hidden');

      // Auto-hide after duration if specified
      if (duration > 0) {
        setTimeout(() => {
          notification.classList.add('hidden');
          this.checkVisibility();
        }, duration);
      }
    }

    showElement(elementId) {
      const element = document.getElementById(elementId);
      if (!element) return;

      this.statusElement?.classList.remove('hidden');
      element.classList.remove('hidden');
      this.isVisible = true;
    }

    hideElement(elementId) {
      const element = document.getElementById(elementId);
      if (!element) return;

      element.classList.add('hidden');
      this.checkVisibility();
    }

    checkVisibility() {
      // Check if any notifications or elements are visible
      const visibleElements = this.statusElement?.querySelectorAll(':not(.hidden)') || [];
      
      if (visibleElements.length <= 1) { // Only the main container is visible
        this.hideStatus();
      }
    }

    hideStatus() {
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
      }

      this.hideTimeout = setTimeout(() => {
        this.statusElement?.classList.add('hidden');
        this.isVisible = false;
      }, 1000);
    }

    updateStatus() {
      if (!navigator.onLine) {
        this.handleOffline();
      }
    }

    async applyUpdate() {
      try {
        const serviceWorkerManager = window.serviceWorkerManager;
        if (serviceWorkerManager) {
          await serviceWorkerManager.applyUpdate();
          // Page will reload automatically after update
        }
      } catch (error) {
        console.error('Failed to apply update:', error);
        alert('Failed to apply update. Please refresh the page manually.');
      }
    }

    showCacheNotification() {
      this.showNotification('cache-notification', 4000);
    }
  }

  // Initialize on DOM ready
  let offlineStatus;
  
  document.addEventListener('DOMContentLoaded', () => {
    offlineStatus = new OfflineStatusManager();
    
    // Make available globally
    window.offlineStatus = offlineStatus;
  });
</script>

<style>
  /* Custom animations for notifications */
  #offline-status > div {
    animation: slideInRight 0.3s ease-out forwards;
  }

  #offline-status > div.hidden {
    animation: slideOutRight 0.3s ease-in forwards;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
</style>