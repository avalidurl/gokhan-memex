---
interface Props {
  url: string
  width?: string | number
  height?: string | number
  autoplay?: boolean
  muted?: boolean
  controls?: boolean
  responsive?: boolean
}

const { 
  url, 
  width = '100%', 
  height = 'auto',
  autoplay = false,
  muted = false,
  controls = true,
  responsive = true
} = Astro.props

// Extract Vimeo video ID from various URL formats
function extractVimeoId(url: string): string | null {
  try {
    // Handle vimeo.com URLs
    const vimeoMatch = url.match(/vimeo\.com\/(?:channels\/[^\/]+\/|groups\/[^\/]+\/videos\/|album\/[^\/]+\/video\/|video\/|)(\d+)/)
    if (vimeoMatch) {
      return vimeoMatch[1]
    }
    
    // Handle player.vimeo.com URLs
    const playerMatch = url.match(/player\.vimeo\.com\/video\/(\d+)/)
    if (playerMatch) {
      return playerMatch[1]
    }
    
    return null
  } catch {
    return null
  }
}

const videoId = extractVimeoId(url)

// Build embed URL parameters
const params = new URLSearchParams()
params.append('color', '0687f5') // Blue accent color to match theme
params.append('title', '0') // Hide title
params.append('byline', '0') // Hide byline
params.append('portrait', '0') // Hide portrait
if (autoplay) params.append('autoplay', '1')
if (muted) params.append('muted', '1')
if (!controls) params.append('controls', '0')

const embedUrl = videoId ? 
  `https://player.vimeo.com/video/${videoId}?${params.toString()}` : 
  null

// Calculate responsive height (16:9 aspect ratio)
const aspectClass = responsive && height === 'auto' ? 'aspect-video' : ''
const uniqueId = `vimeo-${Math.random().toString(36).substring(2, 11)}`
---

<div class="my-6 not-prose">
  {embedUrl ? (
    <div 
      class="vimeo-lazy-container relative rounded-lg overflow-hidden border bg-card"
      data-src={embedUrl}
      data-id={uniqueId}
      data-width={width}
      data-height={height}
      data-responsive={responsive}
      data-aspect-class={aspectClass}
    >
      <!-- Loading Placeholder -->
      <div class={`vimeo-placeholder bg-gray-100 dark:bg-gray-800 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center transition-all duration-300 ${aspectClass}`} style={height !== 'auto' ? `height: ${height}px` : 'min-height: 200px'}>
        <div class="text-center">
          <div class="animate-pulse mb-4">
            <!-- Vimeo-style play button -->
            <div class="w-16 h-16 bg-blue-500 rounded-full mx-auto mb-3 flex items-center justify-center">
              <div class="w-0 h-0 border-l-[12px] border-l-white border-y-[8px] border-y-transparent ml-1"></div>
            </div>
            <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-32 mx-auto mb-2"></div>
            <div class="h-3 bg-gray-300 dark:bg-gray-600 rounded w-24 mx-auto"></div>
          </div>
          <button 
            class="mt-4 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white text-sm rounded-md transition-colors"
            onclick="this.parentElement.parentElement.parentElement.querySelector('.vimeo-loader').click()"
          >
            Load Vimeo Player
          </button>
        </div>
      </div>
      
      <!-- Hidden load trigger -->
      <button class="vimeo-loader hidden" data-target={uniqueId}></button>
      
      <!-- Iframe container (initially hidden) -->
      <div class="vimeo-iframe-container hidden">
        <!-- Iframe will be inserted here -->
      </div>
    </div>
  ) : (
    <div class="rounded-lg overflow-hidden border bg-card">
      <div class="p-6 text-center">
        <p class="text-muted-foreground mb-4">
          Unable to embed Vimeo video
        </p>
        <a 
          href={url} 
          target="_blank" 
          rel="noopener noreferrer"
          class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
        >
          Watch on Vimeo
        </a>
      </div>
    </div>
  )}
  
  <div class="mt-2 text-center">
    <a 
      href={url} 
      target="_blank" 
      rel="noopener noreferrer"
      class="text-xs text-muted-foreground hover:text-foreground transition-colors"
    >
      Watch on Vimeo â†—
    </a>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Intersection Observer for lazy loading
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadVimeoEmbed(entry.target);
          observer.unobserve(entry.target);
        }
      });
    }, {
      rootMargin: '50px' // Start loading 50px before the element comes into view
    });

    // Observe all Vimeo containers
    document.querySelectorAll('.vimeo-lazy-container').forEach(container => {
      observer.observe(container);
      
      // Also set up manual loading for the button
      const loader = container.querySelector('.vimeo-loader');
      if (loader) {
        loader.addEventListener('click', () => {
          loadVimeoEmbed(container);
          observer.unobserve(container);
        });
      }
    });

    function loadVimeoEmbed(container: Element) {
      const containerEl = container as HTMLElement;
      const src = containerEl.dataset.src;
      const width = containerEl.dataset.width || '100%';
      const height = containerEl.dataset.height || 'auto';
      const responsive = containerEl.dataset.responsive === 'true';
      const aspectClass = containerEl.dataset.aspectClass || '';
      
      const placeholder = container.querySelector('.vimeo-placeholder');
      const iframeContainer = container.querySelector('.vimeo-iframe-container');
      
      if (!src || !placeholder || !iframeContainer) return;

      // Show loading state
      placeholder.innerHTML = `
        <div class="text-center">
          <div class="animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Loading Vimeo player...</div>
        </div>
      `;

      // Create iframe wrapper div with proper styling
      const iframeWrapper = document.createElement('div');
      if (aspectClass) {
        iframeWrapper.className = `w-full ${aspectClass}`;
      } else if (height !== 'auto') {
        iframeWrapper.style.height = `${height}px`;
        iframeWrapper.className = 'w-full';
      } else {
        iframeWrapper.className = 'w-full';
        iframeWrapper.style.height = '400px'; // Default height
      }

      // Create and insert iframe
      const iframe = document.createElement('iframe');
      iframe.className = 'w-full h-full';
      iframe.src = src;
      iframe.setAttribute('frameborder', '0');
      iframe.setAttribute('allow', 'autoplay; fullscreen; picture-in-picture');
      iframe.setAttribute('allowfullscreen', 'true');
      iframe.title = 'Vimeo video player';
      iframe.loading = 'eager'; // Load immediately once triggered
      
      // Insert iframe into wrapper
      iframeWrapper.appendChild(iframe);
      iframeContainer.appendChild(iframeWrapper);
      
      // Handle iframe load
      iframe.onload = () => {
        placeholder.classList.add('hidden');
        iframeContainer.classList.remove('hidden');
      };
      
      // Fallback timeout
      setTimeout(() => {
        placeholder.classList.add('hidden');
        iframeContainer.classList.remove('hidden');
      }, 5000);
    }
  });
</script>